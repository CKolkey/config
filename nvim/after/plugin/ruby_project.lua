-- local function rails_project()
--   if utils.file_in_cwd("Gemfile.lock") and utils.file_in_cwd("config/environment.rb") then
--     return true
--   else
--     return false
--   end
-- end
--
-- local function gem_project()
--   -- Should check for .gemspec file instead
--   if utils.file_in_cwd("lib/") and utils.file_in_cwd("spec/") then
--     return true
--   else
--     return false
--   end
-- end
--
-- local function projct_type()
--   if rails_project() then
--     return "rails"
--   elseif gem_project() then
--     return "gem"
--   else
--     return nil
--   end
-- end
--
-- if _G.RubyProject or not projct_type() then
--   return
-- end
--
-- local project_settings = {
--   gem = {
--     icon        = " ",
--     name        = "RubyProject",
--     spec_helper = "rails_helper",
--     projections = {
--       {
--         pattern  = "lib/([%w_/]+)/([%w_]+)%.rb$",
--         template = "spec/lib/%s/%s_spec.rb"
--       },
--       {
--         pattern  = "spec/lib/([%w_/]+)/([%w_]+)_spec%.rb$",
--         template = "lib/%s/%s.rb"
--       },
--     },
--     commands    = {
--       ["A"] = {
--         fn = function() RubyProject.fn.edit_alternate_file("edit") end,
--       },
--       ["AS"] = {
--         fn = function() RubyProject.fn.edit_alternate_file("split") end,
--       },
--       ["AV"] = {
--         fn = function() RubyProject.fn.edit_alternate_file("vsplit") end,
--       },
--       ["Egemfile"] = {
--         fn = function() vim.cmd.edit("Gemfile") end
--       },
--       ["Egemspec"] = {
--         -- TODO
--         fn = function() vim.cmd.edit("Gemfile") end
--       },
--       ["Eenvrc"] = {
--         fn = function() vim.cmd.edit(".envrc") end
--       },
--     }
--
--   },
--   rails = {
--     icon        = " ",
--     name        = "RubyProject",
--     spec_helper = "spec_helper",
--     commands    = {
--       ["A"] = {
--         fn = function() RubyProject.fn.edit_alternate_file("edit") end,
--       },
--       ["AS"] = {
--         fn = function() RubyProject.fn.edit_alternate_file("split") end,
--       },
--       ["AV"] = {
--         fn = function() RubyProject.fn.edit_alternate_file("vsplit") end,
--       },
--       ["Emigration"] = {
--         fn = function() vim.cmd.edit(RubyProject.fn.get_last_migration()) end
--       },
--       ["Eschema"] = {
--         fn = function() vim.cmd.edit("db/schema.rb") end
--       },
--       ["Egemfile"] = {
--         fn = function() vim.cmd.edit("Gemfile") end
--       },
--       ["Eroutes"] = {
--         fn = function() vim.cmd.edit("config/routes.rb") end
--       },
--       ["Eenvrc"] = {
--         fn = function() vim.cmd.edit(".envrc") end
--       },
--     },
--     projections = {
--       {
--         pattern  = "app/controllers([%w_/]*)/([%w_]+)%.rb$",
--         template = "spec/requests%s/%s_spec.rb"
--       },
--       {
--         pattern  = "spec/requests([%w_/]*)/([%w_]+)_spec%.rb$",
--         template = "app/controllers%s/%s.rb"
--       },
--       {
--         pattern  = "app/([%w_/]+)/([%w_]+)%.rb$",
--         template = "spec/%s/%s_spec.rb"
--       },
--       {
--         pattern  = "spec/([%w_/]+)/([%w_]+)_spec%.rb$",
--         template = "app/%s/%s.rb"
--       },
--     },
--   }
-- }
--
-- local base_settings = {
--   root = vim.loop.cwd() .. "/",
--   fn = {},
-- }
--
-- function RubyProject.fn.notice(message, level)
--   level = level or vim.log.levels.INFO
--   vim.notify(message, level, { icon = RubyProject.icon })
-- end
--
-- function RubyProject.fn.find_alternate()
--   local current = vim.fn.expand("%:p")
--   if not vim.startswith(current, RubyProject.root) then
--     return
--   end
--
--   local alternate
--
--   current, _ = current:gsub("^" .. RubyProject.root, "")
--
--   for _, projection in ipairs(RubyProject.projections) do
--     if current:match(projection.pattern) then
--       local path, file = current:match(projection.pattern)
--       alternate = string.format(projection.template, path, file)
--       break
--     end
--   end
--
--   return alternate
-- end
--
-- function RubyProject.fn.build_spec_file(filepath, open)
--   local definitions = require("nvim-treesitter.locals").get_definitions_lookup_table(0)
--
--   local class
--   local methods = {}
--
--   for _, definition in pairs(definitions) do
--     if definition.kind == "function" then
--       local node_text = vim.treesitter.get_node_text(definition.node, 0)
--       if node_text ~= "initialize" then
--         table.insert(methods, node_text)
--       end
--     elseif definition.kind == "type" then
--       class = vim.treesitter.get_node_text(definition.node, 0)
--     end
--   end
--
--   vim.cmd(":silent " .. open .. " " .. filepath)
--
--   local template = {
--     "# frozen_string_literal: true",
--     "",
--     'require "' .. RubyProject.spec_helper .. '"',
--     "",
--     "RSpec.describe " .. class .. " do",
--   }
--
--   for _, method in ipairs(methods) do
--     table.insert(template, '  describe "#' .. method .. '" do')
--     table.insert(template, "  end")
--     table.insert(template, "")
--   end
--
--   table.insert(template, #template, "end")
--
--   vim.api.nvim_buf_set_lines(0, 0, #template, false, template)
--   vim.api.nvim_win_set_cursor(0, { 6, 0 })
--   vim.cmd.write()
-- end
--
-- function RubyProject.fn.edit_alternate_file(cmd)
--   local alternate = RubyProject.fn.find_alternate()
--   if not alternate then
--     print("RubyProject: Couldn't find alternate file")
--   end
--
--   if vim.loop.fs_stat(alternate) then
--     vim.cmd[cmd](alternate)
--   else
--     RubyProject.fn.build_spec_file(alternate, cmd)
--   end
-- end
--
-- function RubyProject.fn.get_last_migration()
--   local migrations = {}
--   for file, type in vim.fs.dir(RubyProject.root .. "db/migrate/") do
--     if type == "file" then
--       table.insert(migrations, file)
--     end
--   end
--
--   return "db/migrate/" .. migrations[#migrations]
-- end
--
-- _G.RubyProject = vim.tbl_extend("force", base_settings, project_settings[projct_type()])
--
-- for cmd, def in pairs(RubyProject.commands) do
--   vim.api.nvim_create_user_command(cmd, def.fn, def.opts or {})
-- end
--
-- vim.defer_fn(function() RubyProject.fn.notice("Loaded " .. RubyProject.name) end, 1000)
