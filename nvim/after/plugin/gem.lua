-- local function in_gem()
--   -- Should check for .gemspec file instead
--   if utils.file_in_cwd("lib/") and utils.file_in_cwd("spec/") then
--     return true
--   else
--     return false
--   end
-- end
--
-- if _G.Gem or not in_gem() then
--   return
-- end
--
-- _G.Gem = {
--   root = vim.loop.cwd() .. "/",
--   fn = {},
--   icon = "ï†¸ ",
--   name = "Gem",
--   projections = {
--     {
--       pattern  = "lib/([%w_/]+)/([%w_]+)%.rb$",
--       template = "spec/lib/%s/%s_spec.rb"
--     },
--     {
--       pattern  = "spec/lib/([%w_/]+)/([%w_]+)_spec%.rb$",
--       template = "lib/%s/%s.rb"
--     },
--   },
-- }
--
-- function Gem.fn.notice(message, level)
--   level = level or vim.log.levels.INFO
--   vim.notify(message, level, { icon = Gem.icon })
-- end
--
-- function Gem.fn.find_alternate()
--   local current = vim.fn.expand("%:p")
--   if not vim.startswith(current, Gem.root) then
--     return
--   end
--
--   local alternate
--
--   current, _ = current:gsub("^" .. Gem.root, "")
--
--   for _, projection in ipairs(Gem.projections) do
--     -- The patterns/templates are wrong. Gotta get a bit fancy with the folder thats the gem name, etc
--     if current:match(projection.pattern) then
--       local path, file = current:match(projection.pattern)
--       alternate = string.format(projection.template, path, file)
--       break
--     end
--   end
--
--   return alternate
-- end
--
-- function Gem.fn.build_spec_file(filepath, open)
--   local definitions = require("nvim-treesitter.locals").get_definitions_lookup_table(0)
--
--   local class
--   local methods = {}
--
--   for _, definition in pairs(definitions) do
--     if definition.kind == "function" then
--       local node_text = vim.treesitter.get_node_text(definition.node, 0)
--       if node_text ~= "initialize" then
--         table.insert(methods, node_text)
--       end
--     elseif definition.kind == "type" then
--       class = vim.treesitter.get_node_text(definition.node, 0)
--     end
--   end
--
--   vim.cmd(":silent " .. open .. " " .. filepath)
--
--   local template = {
--     "# frozen_string_literal: true",
--     "",
--     'require "spec_helper"',
--     "",
--     "RSpec.describe " .. class .. " do",
--   }
--
--   for _, method in ipairs(methods) do
--     table.insert(template, '  describe "#' .. method .. '" do')
--     table.insert(template, "  end")
--     table.insert(template, "")
--   end
--
--   table.insert(template, #template, "end")
--
--   vim.api.nvim_buf_set_lines(0, 0, #template, false, template)
--   vim.api.nvim_win_set_cursor(0, { 6, 0 })
--   vim.cmd.write()
-- end
--
-- function Gem.fn.edit_alternate_file(cmd)
--   local alternate = Gem.fn.find_alternate()
--   if not alternate then
--     print("Gem: Couldn't find alternate file")
--   end
--
--   if vim.loop.fs_stat(alternate) then
--     vim.cmd[cmd](alternate)
--   else
--     Gem.fn.build_spec_file(alternate, cmd)
--   end
-- end
--
-- Gem.commands = {
--   ["A"] = {
--     fn = function() Gem.fn.edit_alternate_file("edit") end,
--   },
--   ["AS"] = {
--     fn = function() Gem.fn.edit_alternate_file("split") end,
--   },
--   ["AV"] = {
--     fn = function() Gem.fn.edit_alternate_file("vsplit") end,
--   },
--   ["Egemfile"] = {
--     fn = function() vim.cmd.edit("Gemfile") end
--   },
--   ["Egemspec"] = {
--     fn = function() vim.cmd.edit("Gemfile") end
--   },
--   ["Eenvrc"] = {
--     fn = function() vim.cmd.edit(".envrc") end
--   },
-- }
--
-- for cmd, def in pairs(Gem.commands) do
--   vim.api.nvim_create_user_command(cmd, def.fn, def.opts or {})
-- end
--
-- vim.defer_fn(function() Gem.fn.notice("Loaded " .. Gem.name) end, 1000)
