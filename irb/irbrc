# vim: set ft=ruby

IRB.conf[:USE_AUTOCOMPLETE] = false

# https://docs.ruby-lang.org/en/master/IRB.html#module-IRB-label-Customizing+the+IRB+Prompt
if defined?(Rails)
  def formatted_env
    bold  = ->(text) { "\033[1m#{text}\033[0m" }
    red   = ->(text) { "\e[31m#{text}\e[0m" }
    green = ->(text) { "\e[32m#{text}\e[0m" }
    blue  = ->(text) { "\e[34m#{text}\e[0m" }

    if Rails.env.production?
      bold.call(red.call(Rails.env.upcase))
    elsif Rails.env.development?
      green.call(Rails.env.upcase[0, 3])
    else
      blue.call(Rails.env.upcase)
    end
  end

  IRB.conf[:PROMPT][:RAILS_PROMPT] = {
    PROMPT_I: "[#{formatted_env}] (%m)> ",
    PROMPT_N: "[#{formatted_env}] (%m)> ",
    PROMPT_S: "[#{formatted_env}] (%m)%l ",
    PROMPT_C: "[#{formatted_env}] (%m)* ",
    RETURN: "=> %s\n"
  }

  IRB.conf[:PROMPT_MODE] = :RAILS_PROMPT
end

class Object
  # list methods which aren't in superclass
  def local_methods(obj = self)
    (obj.methods - obj.class.superclass.instance_methods).sort
  end

  # print documentation
  #
  #   ri 'Array#pop'
  #   Array.ri
  #   Array.ri :pop
  #   arr.ri :pop
  def ri(method = nil)
    unless method && method =~ /^[A-Z]/ # if class isn't specified
      klass = is_a?(Class) ? name : self.class.name
      method = [klass, method].compact.join('#')
    end
    system 'ri', method.to_s
  end
end

def copy(str)
  IO.popen('pbcopy', 'w') { |f| f << str.to_s }
end

def copy_history
  history = Readline::HISTORY.entries
  index = history.rindex('exit') || -1
  content = history[(index + 1)..-2].join("\n")
  puts content
  copy content
end

def paste
  `pbpaste`
end
