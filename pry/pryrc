if defined?(PryByebug)
  Pry.commands.alias_command 'c', 'continue'
  Pry.commands.alias_command 's', 'step'
  Pry.commands.alias_command 'n', 'next'
  Pry.commands.alias_command 'f', 'finish'
end

# Hit Enter to repeat last command
Pry::Commands.command /^$/, "repeat last command" do
  pry_instance.run_command Pry.history.to_a.last
end

if defined?(Rails)
  # Custom Prompt - Show environment name in pry prompt
  def formatted_env
    if Rails.env.production?
      bold_env = Pry::Helpers::Text.bold(Rails.env.upcase)
      Pry::Helpers::Text.red(bold_env)
    elsif Rails.env.development?
      Pry::Helpers::Text.green(Rails.env.upcase[0, 3])
    else
      Pry::Helpers::Text.yellow(Rails.env.upcase)
    end
  end

  Pry::Prompt.add "project_custom", "Includes the current Rails environment.", %w[> *] do |target_self, nest_level, _pry, sep|
    "[#{formatted_env}] (#{Pry.view_clip(target_self)}) #{'>' * nest_level}#{sep} "
  end

  Pry.config.prompt = Pry::Prompt.all["project_custom"]
end

%w[looksee/shortcuts].each do |gem|
  begin
    require gem
  rescue LoadError
  end
end

class Object
  # list methods which aren't in superclass
  def local_methods(obj = self)
    (obj.methods - obj.class.superclass.instance_methods).sort
  end

  # print documentation
  #
  #   ri 'Array#pop'
  #   Array.ri
  #   Array.ri :pop
  #   arr.ri :pop
  def ri(method = nil)
    unless method && method =~ /^[A-Z]/ # if class isn't specified
      klass = self.kind_of?(Class) ? name : self.class.name
      method = [klass, method].compact.join('#')
    end
    system 'ri', method.to_s
  end
end

def copy(str)
  IO.popen('pbcopy', 'w') { |f| f << str.to_s }
end

def copy_history
  history = Readline::HISTORY.entries
  index = history.rindex("exit") || -1
  content = history[(index+1)..-2].join("\n")
  puts content
  copy content
end

def paste
  `pbpaste`
end
